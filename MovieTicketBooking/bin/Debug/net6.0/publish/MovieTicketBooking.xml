<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MovieTicketBooking</name>
    </assembly>
    <members>
        <member name="T:MovieTicketBooking.Data.AutoMapper.AutoMapperProfile">
            <summary>
            AutoMapper profile class for mapping DTOs to Entities and vice versa.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Data.AutoMapper.AutoMapperProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Data.AutoMapper.AutoMapperProfile"/> class.
            Configures the mappings between DTOs and Entities.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.IDatabaseConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.IDatabaseConnection.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.IDatabaseConnection.DatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.DatabaseConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.DatabaseConnection.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.DatabaseConnection.DatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Dto.AuthenticationRequest">
            <summary>
            Represents the request for user authentication.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.AuthenticationRequest.Username">
            <summary>
            Gets or sets the username of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.AuthenticationRequest.Password">
            <summary>
            Gets or sets the password of the user.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Dto.AuthenticationResponse">
            <summary>
            Represents the response for user authentication.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.AuthenticationResponse.AccessToken">
            <summary>
            Gets or sets the access token generated upon successful authentication.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.AuthenticationResponse.UserId">
            <summary>
            Gets or sets the ID of the authenticated user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.AuthenticationResponse.IsAdmin">
            <summary>
            Gets or sets a value indicating whether the authenticated user is an administrator.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Dto.CreateResponse">
            <summary>
            Represents the response for create operations such as ticket booking and updates.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.CreateResponse.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the operation was successful.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.CreateResponse.Message">
            <summary>
            Gets or sets the message providing details about the operation's success or failure.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Dto.MovieDto">
            <summary>
            Represents a data transfer object for movie information.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.MovieDto.MovieName">
            <summary>
            Gets or sets the name of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.MovieDto.MoviePoster">
            <summary>
            Gets or sets the URL of the movie poster.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.MovieDto.Genre">
            <summary>
            Gets or sets the genre of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.MovieDto.Description">
            <summary>
            Gets or sets the description of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.MovieDto.Languages">
            <summary>
            Gets or sets the languages in which the movie is available.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Dto.TicketDto">
            <summary>
            Data transfer object representing ticket information for booking and updates.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.TicketDto.TicketsCount">
            <summary>
            Gets or sets the number of tickets.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.TicketDto.MovieId">
            <summary>
            Gets or sets the ID of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.TicketDto.TheaterId">
            <summary>
            Gets or sets the ID of the theater.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.TicketDto.TicketId">
            <summary>
            Gets or sets the ID of the ticket.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate">
            <summary>
            Represents a data transfer object for updating user password.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate.Username">
            <summary>
            Gets or sets the username of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate.OldPassword">
            <summary>
            Gets or sets the old password of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate.NewPassword">
            <summary>
            Gets or sets the new password of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate.ConfirmPassword">
            <summary>
            Gets or sets the confirmation of the new password.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Entities.Movie">
            <summary>
            Represents a movie entity.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.Id">
            <summary>
            Gets or sets the unique identifier of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.MovieName">
            <summary>
            Gets or sets the name of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.MoviePoster">
            <summary>
            Gets or sets the URL of the movie poster.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.Genre">
            <summary>
            Gets or sets the genre of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.Description">
            <summary>
            Gets or sets the description of the movie.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.Languages">
            <summary>
            Gets or sets the languages in which the movie is available.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.Created">
            <summary>
            Gets or sets the date and time when the movie was created.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Movie.Updated">
            <summary>
            Gets or sets the date and time when the movie was last updated.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Entities.Theater">
            <summary>
            Represents a theater entity.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Theater.Id">
            <summary>
            Gets or sets the unique identifier of the theater.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Theater.TheaterName">
            <summary>
            Gets or sets the name of the theater.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Theater.City">
            <summary>
            Gets or sets the city where the theater is located.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Theater.AvailableSeat">
            <summary>
            Gets or sets the number of available seats in the theater.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Theater.Created">
            <summary>
            Gets or sets the date and time when the theater was created.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Theater.Updated">
            <summary>
            Gets or sets the date and time when the theater was last updated.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Entities.TheaterDto">
            <summary>
            Represents a data transfer object for theater information.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.TheaterDto.TheaterName">
            <summary>
            Gets or sets the name of the theater.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.TheaterDto.City">
            <summary>
            Gets or sets the city where the theater is located.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Entities.Tickets">
            <summary>
            Represents a ticket entity.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.TicketId">
            <summary>
            Gets or sets the unique identifier of the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.TotalCount">
            <summary>
            Gets or sets the total count of tickets.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.TheaterId">
            <summary>
            Gets or sets the identifier of the theater associated with the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.Theater">
            <summary>
            Gets or sets the theater associated with the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.MovieId">
            <summary>
            Gets or sets the identifier of the movie associated with the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.Movie">
            <summary>
            Gets or sets the movie associated with the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.UserId">
            <summary>
            Gets or sets the identifier of the user who booked the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.User">
            <summary>
            Gets or sets the user who booked the ticket.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.Created">
            <summary>
            Gets or sets the date and time when the ticket was created.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.Tickets.Updated">
            <summary>
            Gets or sets the date and time when the ticket was last updated.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Entities.User">
            <summary>
            Represents a user entity.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.Id">
            <summary>
            Gets or sets the unique identifier of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.FirstName">
            <summary>
            Gets or sets the first name of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.LastName">
            <summary>
            Gets or sets the last name of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.EmailAddress">
            <summary>
            Gets or sets the email address of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.Username">
            <summary>
            Gets or sets the username of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.PasswordHash">
            <summary>
            Gets or sets the password hash of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.PasswordSalt">
            <summary>
            Gets or sets the password salt of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.ContactNumber">
            <summary>
            Gets or sets the contact number of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.IsAdmin">
            <summary>
            Gets or sets a value indicating whether the user is an admin.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.Created">
            <summary>
            Gets or sets the date and time when the user was created.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.User.Updated">
            <summary>
            Gets or sets the date and time when the user was last updated.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Data.Models.Entities.UserDto">
            <summary>
            Represents a user data transfer object (DTO).
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.UserDto.FirstName">
            <summary>
            Gets or sets the first name of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.UserDto.LastName">
            <summary>
            Gets or sets the last name of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.UserDto.EmailAddress">
            <summary>
            Gets or sets the email address of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.UserDto.Username">
            <summary>
            Gets or sets the username of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.UserDto.Password">
            <summary>
            Gets or sets the password of the user.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Data.Models.Entities.UserDto.ContactNumber">
            <summary>
            Gets or sets the contact number of the user.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Controllers.AuthenticationController">
            <summary>
            Controller for handling authentication-related operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Controllers.AuthenticationController.#ctor(MovieTicketBooking.Service.Interface.ICustomerService)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Controllers.AuthenticationController"/> class.
            </summary>
            <param name="service">The customer service.</param>
        </member>
        <member name="M:MovieTicketBooking.Controllers.AuthenticationController.Login(MovieTicketBooking.Data.Models.Dto.AuthenticationRequest)">
            <summary>
            User login method.
            </summary>
            <param name="model">The authentication request model.</param>
            <returns>An action result indicating the success or failure of the login operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Controllers.BookingController">
            <summary>
            Controller for handling movie ticket bookings.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Controllers.BookingController.#ctor(MovieTicketBooking.Service.Interface.IBookingService)">
            <summary>
            Constructor of Ticket Controller
            </summary>
            <param name="service">Service for handling booking operations.</param>
        </member>
        <member name="M:MovieTicketBooking.Controllers.BookingController.TicketBook(MovieTicketBooking.Data.Models.Dto.TicketDto)">
            <summary>
            Book a movie ticket for the user.
            </summary>
            <param name="model">Ticket booking details.</param>
            <returns>Response indicating the success or failure of the booking operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.BookingController.RetrieveTickets">
            <summary>
            Retrieve all tickets booked by the user.
            </summary>
            <returns>List of tickets booked by the user.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.BookingController.UpdateTicket(MovieTicketBooking.Data.Models.Dto.TicketDto)">
            <summary>
            Update an existing ticket booking for the user.
            </summary>
            <param name="model">Updated ticket details.</param>
            <returns>Response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Controllers.CustomerController">
            <summary>
            
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Controllers.CustomerController.#ctor(MovieTicketBooking.Service.Interface.ICustomerService)">
            <summary>
            Constructor of UserController
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:MovieTicketBooking.Controllers.CustomerController.CreateUser(MovieTicketBooking.Data.Models.Entities.UserDto,System.Boolean)">
            <summary>
            Create new user
            </summary>
            <param name="model">User model data</param>
            <param name="isAdmin"></param>
            <returns>Action result</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.CustomerController.UpdatePassword(MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate)">
            <summary>
            Update the user password
            </summary>
            <param name="userPassword"></param>
            <returns></returns>
        </member>
        <member name="T:MovieTicketBooking.Controllers.MovieController">
            <summary>
            Controller for managing movie-related operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Controllers.MovieController.#ctor(MovieTicketBooking.Service.Interface.IMovieService)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Controllers.MovieController"/> class.
            </summary>
            <param name="service">The movie service.</param>
        </member>
        <member name="M:MovieTicketBooking.Controllers.MovieController.CreateMovie(MovieTicketBooking.Data.Models.Dto.MovieDto)">
            <summary>
            Creates a new movie.
            </summary>
            <param name="model">The movie data.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.MovieController.GetMovies">
            <summary>
            Retrieves all movies.
            </summary>
            <returns>The list of movies.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.MovieController.GetMovieById(System.String)">
            <summary>
            Retrieves a movie by its ID.
            </summary>
            <param name="id">The ID of the movie to retrieve.</param>
            <returns>The movie object if found, otherwise a bad request response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.MovieController.DeleteMovie(System.String)">
            <summary>
            Deletes a movie by its ID.
            </summary>
            <param name="id">The ID of the movie to delete.</param>
            <returns>The deletion response.</returns>
        </member>
        <member name="T:MovieTicketBooking.Controllers.TheaterController">
            <summary>
            Controller for managing theaters.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Controllers.TheaterController.#ctor(MovieTicketBooking.Service.Interface.ITheaterService)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Controllers.TheaterController"/> class.
            </summary>
            <param name="service">The theater service.</param>
        </member>
        <member name="M:MovieTicketBooking.Controllers.TheaterController.CreateTheater(MovieTicketBooking.Data.Models.Entities.TheaterDto)">
            <summary>
            Create a new theater.
            </summary>
            <param name="model">The theater data.</param>
            <returns>The action result.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.TheaterController.GetTheater">
            <summary>
            Get a list of theaters.
            </summary>
            <returns>The action result.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.TheaterController.GetTheater(System.String)">
            <summary>
            Get a theater by ID.
            </summary>
            <param name="id">The ID of the theater.</param>
            <returns>The action result.</returns>
        </member>
        <member name="M:MovieTicketBooking.Controllers.TheaterController.DeleteTheater(System.String)">
            <summary>
            Delete a theater by ID.
            </summary>
            <param name="id">The ID of the theater to delete.</param>
            <returns>The action result.</returns>
        </member>
        <member name="T:MovieTicketBooking.Models.Entities.PrepareResponse">
            <summary>
            Represents a response indicating the preparation status.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Models.Entities.PrepareResponse.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the preparation was successful.
            </summary>
        </member>
        <member name="P:MovieTicketBooking.Models.Entities.PrepareResponse.Message">
            <summary>
            Gets or sets a message providing details about the preparation status.
            </summary>
        </member>
        <member name="T:MovieTicketBooking.Business.Repository.BookingRepository">
            <summary>
            Repository for handling ticket bookings.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.#ctor(MovieTicketBooking.Data.IDatabaseConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Repository.BookingRepository"/> class.
            </summary>
            <param name="settings">The database connection settings.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.ReteriveTicktes(System.String)">
            <summary>
            Retrieves all tickets booked by a user.
            </summary>
            <param name="userId">The ID of the user whose tickets are to be retrieved.</param>
            <returns>A list of tickets booked by the user.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.TicketBook(MovieTicketBooking.Data.Models.Entities.Tickets)">
            <summary>
            Books a movie ticket.
            </summary>
            <param name="ticket">The ticket details to be booked.</param>
            <returns>A response indicating the success or failure of the booking operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.GetTicketById(System.String)">
            <summary>
            Retrieves a ticket by its ID.
            </summary>
            <param name="ticketId">The ID of the ticket to be retrieved.</param>
            <returns>The ticket details if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.GetTheaterById(System.String)">
            <summary>
            Retrieves a theater by its ID.
            </summary>
            <param name="theaterId">The ID of the theater to be retrieved.</param>
            <returns>The theater details if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.UpdateTicket(MovieTicketBooking.Data.Models.Entities.Tickets)">
            <summary>
            Updates an existing ticket booking.
            </summary>
            <param name="ticket">The updated ticket details.</param>
            <returns>A response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.BookingRepository.UpdateTheater(MovieTicketBooking.Data.Models.Entities.Theater)">
            <summary>
            Updates the details of a theater.
            </summary>
            <param name="theater">The updated theater details.</param>
            <returns>A response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Repository.CustomerRepository">
            <summary>
            Repository for handling customer-related data operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.#ctor(MovieTicketBooking.Data.IDatabaseConnection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Repository.CustomerRepository"/> class.
            </summary>
            <param name="settings">The database connection settings.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.CreateUser(MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Creates a new user.
            </summary>
            <param name="data">The user data.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.CheckUserExistsByUsername(System.String)">
            <summary>
            Checks if a user with the specified username exists.
            </summary>
            <param name="username">The username to check.</param>
            <returns>True if the user exists, false otherwise.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.GetUserByUsername(System.String)">
            <summary>
            Retrieves a user by username.
            </summary>
            <param name="username">The username of the user to retrieve.</param>
            <returns>The user object if found, null otherwise.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.PasswordUpdate(MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate,MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Updates the password of a user.
            </summary>
            <param name="userPassword">The new user password.</param>
            <param name="user">The user whose password is to be updated.</param>
            <returns>The update response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.VerifyUserPassword(System.String,MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Verifies a user's password.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="user">The user object containing the hashed password and salt.</param>
            <returns>True if the password is verified, false otherwise.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.GenerateToken(MovieTicketBooking.Data.Models.Entities.User,System.String)">
            <summary>
            Generates a JSON Web Token (JWT) for the user.
            </summary>
            <param name="user">The user.</param>
            <param name="role">The role of the user.</param>
            <returns>The JWT token.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.CreatePasswordHash(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Creates hash and salt for password.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="passwordHash">The computed password hash.</param>
            <param name="passwordSalt">The password salt.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.CustomerRepository.VerifyPasswordHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Verifies password with hashed password using salt.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="passwordHash">The stored password hash.</param>
            <param name="passwordSalt">The stored password salt.</param>
            <returns>True if the password is verified, false otherwise.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Repository.MovieRepository">
            <summary>
            Repository for handling movie data operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.MovieRepository.#ctor(MovieTicketBooking.Data.IDatabaseConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Repository.MovieRepository"/> class.
            </summary>
            <param name="settings">The database connection settings.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.MovieRepository.Create(MovieTicketBooking.Data.Models.Entities.Movie)">
            <summary>
            Creates a new movie.
            </summary>
            <param name="movie">The movie object to create.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.MovieRepository.DeleteMovie(System.String)">
            <summary>
            Deletes a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to delete.</param>
            <returns>The deletion response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.MovieRepository.GetMovie">
            <summary>
            Retrieves all movies.
            </summary>
            <returns>The list of movies.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.MovieRepository.GetMovie(System.String)">
            <summary>
            Retrieves a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to retrieve.</param>
            <returns>The movie object if found, otherwise null.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Repository.TheaterRepository">
            <summary>
            Repository class for managing theater data.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.TheaterRepository.#ctor(MovieTicketBooking.Data.IDatabaseConnection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Repository.TheaterRepository"/> class.
            </summary>
            <param name="settings">Database connection settings.</param>
            <param name="configuration">Application configuration settings.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.TheaterRepository.GetTheater">
            <summary>
            Retrieves a list of all theaters.
            </summary>
            <returns>A list of theaters.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.TheaterRepository.GetTheater(System.String)">
            <summary>
            Retrieves a theater by its ID.
            </summary>
            <param name="id">The ID of the theater.</param>
            <returns>The theater with the specified ID.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.TheaterRepository.AddTheater(MovieTicketBooking.Data.Models.Entities.Theater)">
            <summary>
            Adds a new theater.
            </summary>
            <param name="data">The theater data to add.</param>
            <returns>A response indicating the result of the operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Repository.TheaterRepository.DeleteTheater(System.String)">
            <summary>
            Deletes a theater by its ID.
            </summary>
            <param name="id">The ID of the theater to delete.</param>
            <returns>A response indicating the result of the operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Service.BookingService">
            <summary>
            Service for handling booking operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.BookingService.#ctor(AutoMapper.IMapper,MovieTicketBooking.Repository.Interface.IBookingRepository)">
            <summary>
            Constructor for BookingService.
            </summary>
            <param name="mapper">Mapper for converting DTOs to entities.</param>
            <param name="repository">Repository for interacting with the database.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.BookingService.ReteriveTicktes(System.String)">
            <summary>
            Retrieves all tickets booked by a user.
            </summary>
            <param name="userId">The ID of the user whose tickets are to be retrieved.</param>
            <returns>A list of tickets booked by the user.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.BookingService.TicketBook(MovieTicketBooking.Data.Models.Dto.TicketDto,System.String)">
            <summary>
            Books a movie ticket for a user.
            </summary>
            <param name="ticket">The ticket details to be booked.</param>
            <param name="userId">The ID of the user booking the ticket.</param>
            <returns>A response indicating the success or failure of the booking operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.BookingService.UpdateTicket(MovieTicketBooking.Data.Models.Dto.TicketDto,System.String)">
            <summary>
            Updates an existing ticket booking for a user.
            </summary>
            <param name="ticket">The updated ticket details.</param>
            <param name="userId">The ID of the user updating the ticket.</param>
            <returns>A response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Service.CustomerService">
            <summary>
            Service handling customer operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.#ctor(MovieTicketBooking.Repository.Interface.ICustomerRepository,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Service.CustomerService"/> class.
            </summary>
            <param name="repository">The customer repository.</param>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.CreateUser(MovieTicketBooking.Data.Models.Entities.UserDto,System.Boolean)">
            <summary>
            Create a new user.
            </summary>
            <param name="data">The user data.</param>
            <param name="isAdmin">Indicates if the user is an admin.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.PasswordUpdate(MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate,System.String)">
            <summary>
            Update user password.
            </summary>
            <param name="userPassword">The new user password.</param>
            <param name="username">The username.</param>
            <returns>The update response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.VerifyUserPassword(System.String,MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Verify password with hashed password.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="user">The user object containing the hashed password and salt.</param>
            <returns>True if password is verified, false otherwise.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.CreateJSONToken(MovieTicketBooking.Data.Models.Dto.AuthenticationRequest)">
            <summary>
            Create a JSON token for user.
            </summary>
            <param name="user">The user authentication request.</param>
            <returns>The authentication response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.CreatePasswordHash(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Create hash and salt for password.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="passwordHash">The computed password hash.</param>
            <param name="passwordSalt">The password salt.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.CustomerService.VerifyPasswordHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Verify password with hashed password using salt.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="passwordHash">The stored password hash.</param>
            <param name="passwordSalt">The stored password salt.</param>
            <returns>True if password is verified, false otherwise.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Service.MovieService">
            <summary>
            Service handling movie operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.MovieService.#ctor(MovieTicketBooking.Repository.Interface.IMovieRepository,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Service.MovieService"/> class.
            </summary>
            <param name="repository">The movie repository.</param>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.MovieService.Create(MovieTicketBooking.Data.Models.Dto.MovieDto)">
            <summary>
            Creates a new movie.
            </summary>
            <param name="movie">The movie data.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.MovieService.GetMovie">
            <summary>
            Retrieves all movies.
            </summary>
            <returns>The list of movies.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.MovieService.GetMovie(System.String)">
            <summary>
            Retrieves a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to retrieve.</param>
            <returns>The movie object if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.MovieService.DeleteMovie(System.String)">
            <summary>
            Deletes a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to delete.</param>
            <returns>The deletion response.</returns>
        </member>
        <member name="T:MovieTicketBooking.Business.Service.TheaterService">
            <summary>
            Service for managing theater-related operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.TheaterService.#ctor(MovieTicketBooking.Repository.Interface.ITheaterRepository,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:MovieTicketBooking.Business.Service.TheaterService"/> class.
            </summary>
            <param name="repository">The repository for theater data.</param>
            <param name="mapper">The mapper for mapping data transfer objects.</param>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.TheaterService.GetTheater">
            <summary>
            Gets a list of theaters.
            </summary>
            <returns>A list of theaters.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.TheaterService.GetTheater(System.String)">
            <summary>
            Gets a theater by its ID.
            </summary>
            <param name="id">The ID of the theater.</param>
            <returns>The theater.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.TheaterService.AddTheater(MovieTicketBooking.Data.Models.Entities.TheaterDto)">
            <summary>
            Adds a new theater.
            </summary>
            <param name="data">The data of the theater to add.</param>
            <returns>The response containing the result of the operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Business.Service.TheaterService.DeleteTheater(System.String)">
            <summary>
            Deletes a theater by its ID.
            </summary>
            <param name="id">The ID of the theater to delete.</param>
            <returns>The response containing the result of the operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Repository.Interface.IBookingRepository">
            <summary>
            Interface for booking repository to handle database operations related to ticket bookings.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IBookingRepository.TicketBook(MovieTicketBooking.Data.Models.Entities.Tickets)">
            <summary>
            Books a movie ticket.
            </summary>
            <param name="ticket">The ticket details to be booked.</param>
            <returns>A response indicating the success or failure of the booking operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IBookingRepository.ReteriveTicktes(System.String)">
            <summary>
            Retrieves all tickets booked by a user.
            </summary>
            <param name="userId">The ID of the user whose tickets are to be retrieved.</param>
            <returns>A list of tickets booked by the user.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IBookingRepository.UpdateTicket(MovieTicketBooking.Data.Models.Entities.Tickets)">
            <summary>
            Updates an existing ticket booking.
            </summary>
            <param name="ticket">The updated ticket details.</param>
            <returns>A response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IBookingRepository.GetTicketById(System.String)">
            <summary>
            Retrieves a ticket by its ID.
            </summary>
            <param name="ticketId">The ID of the ticket to be retrieved.</param>
            <returns>The ticket details if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IBookingRepository.GetTheaterById(System.String)">
            <summary>
            Retrieves a theater by its ID.
            </summary>
            <param name="theaterId">The ID of the theater to be retrieved.</param>
            <returns>The theater details if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IBookingRepository.UpdateTheater(MovieTicketBooking.Data.Models.Entities.Theater)">
            <summary>
            Updates the details of a theater.
            </summary>
            <param name="theater">The updated theater details.</param>
            <returns>A response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Repository.Interface.ICustomerRepository">
            <summary>
            Interface for customer repository.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ICustomerRepository.CreateUser(MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Creates a new user.
            </summary>
            <param name="data">The user data.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ICustomerRepository.CheckUserExistsByUsername(System.String)">
            <summary>
            Checks if a user exists by username.
            </summary>
            <param name="username">The username to check.</param>
            <returns>True if the user exists, false otherwise.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ICustomerRepository.GetUserByUsername(System.String)">
            <summary>
            Gets a user by username.
            </summary>
            <param name="username">The username.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ICustomerRepository.VerifyUserPassword(System.String,MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Verifies a user's password.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="user">The user object containing the hashed password and salt.</param>
            <returns>True if the password is verified, false otherwise.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ICustomerRepository.PasswordUpdate(MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate,MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Updates user password.
            </summary>
            <param name="userPassword">The new user password.</param>
            <param name="username">The username.</param>
            <returns>The update response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ICustomerRepository.GenerateToken(MovieTicketBooking.Data.Models.Entities.User,System.String)">
            <summary>
            Generates a token for a user with a specific role.
            </summary>
            <param name="user">The user.</param>
            <param name="role">The user role.</param>
            <returns>The generated token.</returns>
        </member>
        <member name="T:MovieTicketBooking.Repository.Interface.IMovieRepository">
            <summary>
            Interface for handling movie data operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IMovieRepository.Create(MovieTicketBooking.Data.Models.Entities.Movie)">
            <summary>
            Creates a new movie.
            </summary>
            <param name="movie">The movie object to create.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IMovieRepository.GetMovie">
            <summary>
            Retrieves all movies.
            </summary>
            <returns>The list of movies.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IMovieRepository.GetMovie(System.String)">
            <summary>
            Retrieves a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to retrieve.</param>
            <returns>The movie object if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.IMovieRepository.DeleteMovie(System.String)">
            <summary>
            Deletes a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to delete.</param>
            <returns>The deletion response.</returns>
        </member>
        <member name="T:MovieTicketBooking.Repository.Interface.ITheaterRepository">
            <summary>
            Interface for Theater Repository
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ITheaterRepository.GetTheater">
            <summary>
            Retrieves a list of all theaters.
            </summary>
            <returns>A list of theaters.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ITheaterRepository.GetTheater(System.String)">
            <summary>
            Retrieves a theater by its ID.
            </summary>
            <param name="id">The ID of the theater.</param>
            <returns>The theater with the specified ID.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ITheaterRepository.AddTheater(MovieTicketBooking.Data.Models.Entities.Theater)">
            <summary>
            Adds a new theater.
            </summary>
            <param name="data">The theater data to add.</param>
            <returns>A response indicating the result of the operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Repository.Interface.ITheaterRepository.DeleteTheater(System.String)">
            <summary>
            Deletes a theater by its ID.
            </summary>
            <param name="id">The ID of the theater to delete.</param>
            <returns>A response indicating the result of the operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Service.Interface.IBookingService">
            <summary>
            Interface for booking service to handle ticket booking operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IBookingService.TicketBook(MovieTicketBooking.Data.Models.Dto.TicketDto,System.String)">
            <summary>
            Books a movie ticket for a user.
            </summary>
            <param name="ticket">The ticket details to be booked.</param>
            <param name="userId">The ID of the user booking the ticket.</param>
            <returns>A response indicating the success or failure of the booking operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IBookingService.ReteriveTicktes(System.String)">
            <summary>
            Retrieves all tickets booked by a user.
            </summary>
            <param name="userId">The ID of the user whose tickets are to be retrieved.</param>
            <returns>A list of tickets booked by the user.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IBookingService.UpdateTicket(MovieTicketBooking.Data.Models.Dto.TicketDto,System.String)">
            <summary>
            Updates an existing ticket booking for a user.
            </summary>
            <param name="model">The updated ticket details.</param>
            <param name="userId">The ID of the user updating the ticket.</param>
            <returns>A response indicating the success or failure of the update operation.</returns>
        </member>
        <member name="T:MovieTicketBooking.Service.Interface.ICustomerService">
            <summary>
            Interface for customer-related operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ICustomerService.CreateUser(MovieTicketBooking.Data.Models.Entities.UserDto,System.Boolean)">
            <summary>
            Creates a new user.
            </summary>
            <param name="data">The user data.</param>
            <param name="isAdmin">Flag indicating if the user is an admin.</param>
            <returns>A create response indicating the result of the operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ICustomerService.PasswordUpdate(MovieTicketBooking.Data.Models.Dto.UserPasswordUpdate,System.String)">
            <summary>
            Updates user password.
            </summary>
            <param name="userPassword">The user password update data.</param>
            <param name="username">The username of the user.</param>
            <returns>A create response indicating the result of the operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ICustomerService.CreateJSONToken(MovieTicketBooking.Data.Models.Dto.AuthenticationRequest)">
            <summary>
            Creates a JSON token for user authentication.
            </summary>
            <param name="user">The authentication request containing username and password.</param>
            <returns>A create response containing the token.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ICustomerService.VerifyUserPassword(System.String,MovieTicketBooking.Data.Models.Entities.User)">
            <summary>
            Verifies a user's password.
            </summary>
            <param name="password">The password to verify.</param>
            <param name="user">The user object containing the hashed password and salt.</param>
            <returns>True if the password is verified, false otherwise.</returns>
        </member>
        <member name="T:MovieTicketBooking.Service.Interface.IMovieService">
            <summary>
            Interface for movie-related operations.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IMovieService.Create(MovieTicketBooking.Data.Models.Dto.MovieDto)">
            <summary>
            Creates a new movie.
            </summary>
            <param name="movie">The movie data.</param>
            <returns>The creation response.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IMovieService.GetMovie">
            <summary>
            Retrieves all movies.
            </summary>
            <returns>The list of movies.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IMovieService.GetMovie(System.String)">
            <summary>
            Retrieves a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to retrieve.</param>
            <returns>The movie object if found, otherwise null.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.IMovieService.DeleteMovie(System.String)">
            <summary>
            Deletes a movie by its ID.
            </summary>
            <param name="movieId">The ID of the movie to delete.</param>
            <returns>The deletion response.</returns>
        </member>
        <member name="T:MovieTicketBooking.Service.Interface.ITheaterService">
            <summary>
            Interface for managing theaters.
            </summary>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ITheaterService.GetTheater">
            <summary>
            Get a list of theaters.
            </summary>
            <returns>The list of theaters.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ITheaterService.GetTheater(System.String)">
            <summary>
            Get a theater by ID.
            </summary>
            <param name="id">The ID of the theater.</param>
            <returns>The theater.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ITheaterService.AddTheater(MovieTicketBooking.Data.Models.Entities.TheaterDto)">
            <summary>
            Add a new theater.
            </summary>
            <param name="data">The data of the theater to add.</param>
            <returns>The response containing the result of the operation.</returns>
        </member>
        <member name="M:MovieTicketBooking.Service.Interface.ITheaterService.DeleteTheater(System.String)">
            <summary>
            Delete a theater by ID.
            </summary>
            <param name="id">The ID of the theater to delete.</param>
            <returns>The response containing the result of the operation.</returns>
        </member>
    </members>
</doc>
